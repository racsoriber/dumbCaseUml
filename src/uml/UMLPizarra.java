/*
 * UMLPizarra.java
 *
 * Created on 16 de junio de 2008, 11:02
 */

package uml;

import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import memento.Caretaker;
import presentacion.MiMouseListener;
import presentacion.VistaDiagrama;

/**
 *
 * @author  Hugo
 */
public class UMLPizarra extends javax.swing.JPanel {
    protected UMLComposite diagrama;
    protected Caretaker caretaker = null;
    protected ArrayList< VistaDiagrama > vistas;
    
    /** Creates new form UMLPizarra */
    public UMLPizarra() {
        initComponents();
        diagrama = new UMLComposite();
        caretaker = new Caretaker();
        vistas = new ArrayList< VistaDiagrama >();
        try {
            caretaker.addMemento( (UMLComposite) diagrama.clone() );
        } catch (CloneNotSupportedException ex) {
            ex.printStackTrace();
        }
        this.setDoubleBuffered( true );
    }
    
    /**
     * 
     * @return 
     */
    public UMLComposite getDiagrama() {
        return diagrama;
    }
    
    /**
     * 
     * @param diagrama 
     */
    public void setDiagrama(UMLComposite diagrama) {
        this.diagrama = diagrama;
        actualizarVistas();
        repaint();
    }
    
    /**
     * 
     * @param listener 
     */
    public void addListeners( MiMouseListener listener ){
        addMouseListener( listener );
        addMouseMotionListener( listener );
    }
    
    /**
     * 
     * @param ele 
     * @return 
     */
    public boolean addElemento( UMLElemento ele ){
        if( diagrama.addElemento( ele ) ){
            addMemento();
            return true;
        }
        return false;
    }
    
    /**
     * 
     * @param nombre 
     */
    public void removeElemento( String nombre ){
        UMLElemento temp = diagrama.getElementoByName( nombre );        
        if( temp instanceof UMLClase ){
            UMLElemento aux;
            for( int i=0 ; i < diagrama.getElementos().size() ;i++ ){
                aux = diagrama.getElementos().get( i );
                if( aux.isRelacion() && 
                        ( ( (UMLRelacion) aux).getOrigen().equals( temp ) || ( (UMLRelacion) aux).getDestino().equals( temp ) )
                )
                    diagrama.getElementos().remove( i );
            }
        }
        diagrama.removeElemento( temp );
        addMemento();
    }
    
    public void undo(){
        if( caretaker.hasPrevious() )
            setDiagrama( caretaker.undo() );
        else
            System.out.println("no undo");
        actualizarVistas();
        repaint();
    }
    
    public void redo(){
        if( caretaker.hasMext() )
            setDiagrama( caretaker.redo() );
        else
            System.out.println("no redo");
        actualizarVistas();
        repaint();
    }
    
    /**
     * 
     * @param p 
     * @return 
     */
    public UMLElemento getElementoEn( Point p ){
        return diagrama.getElementoEn( p );
    }
    
    /**
     * 
     * @param g 
     */
    @Override
    public void paint(Graphics g) {
        super.paint( g );
        diagrama.pintar( g );
    }
    
    /**
     * 
     * @param string 
     */
    private void print(String string) {
        System.out.println( string );
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Generado  ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("UML"));
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Declaración de varibales -no modificar//GEN-BEGIN:variables
    // Fin de declaración de variables//GEN-END:variables
    
    /**
     * 
     * @param string 
     */
    public void marcar(String string) {
        desmarcarTodos();
        UMLElemento temp = diagrama.getElementoByName( string );
        if( temp != null)
            temp.setMarcado( true );
        repaint();
    }
    
    public void desmarcarTodos(){
        for (UMLElemento elem : diagrama.getElementos()) {
            elem.setMarcado( false );
        }
    }
    
    private void actualizarVistas(){
        for (VistaDiagrama elem : vistas) {
            elem.setDiagrama( this.diagrama );
            elem.actualizar();
        }
    }
    
    /**
     * 
     * @param vista 
     */
    public void addVista( VistaDiagrama vista ){
        this.vistas.add( vista );
        vista.setDiagrama( this.diagrama );
    }
    
    /**
     * 
     * @param nombre 
     * @return 
     */
    public UMLElemento getElementoByName(String nombre) {
        return diagrama.getElementoByName( nombre );
    }
    
    public void addMemento() {
        try {
            caretaker.addMemento( (UMLComposite) diagrama.clone() );
        } catch (CloneNotSupportedException ex) {
            ex.printStackTrace();
        }
        actualizarVistas();
        repaint();
    }
    
    
}
